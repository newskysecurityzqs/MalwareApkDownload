package com.oxid.malwaresample.dao;

import com.oxid.util.DB;
import com.oxid.util.DBResource;
import com.oxid.util.DBUtilShared;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import org.apache.log4j.Logger;

public class DownStatusDao extends SampleBaseDao {
	static Logger logger = Logger.getLogger(DownStatusDao.class.getName());
	public static String dynamicDirectoryInPortal;
	public static String mp4_folder;
	public static int consumer_id;
	private String sha1_id;
	private int limit;
	private int downloadstatus;

	public int getDownloadstatus() {
		return this.downloadstatus;
	}

	public void setDownloadstatus(int downloadstatus) {
		this.downloadstatus = downloadstatus;
	}

	public int getLimit() {
		return this.limit;
	}

	public void setLimit(int limit) {
		this.limit = limit;
	}

	public String getSha1_id() {
		return this.sha1_id;
	}

	public void setSha1_id(String sha1_id) {
		this.sha1_id = sha1_id;
	}

	public List<String> getDownList() {
		List<String> downlist = db.easilyGetListOfString(
				"SELECT sha1 FROM downloadvtstatus WHERE sha1 > ? order by sha1 limit ?",
				new Object[] { this.sha1_id, Integer.valueOf(this.limit) });
		if (downlist == null) {
			logger.error("get downloadstatus data to update");
			System.exit(-1);
		}
		logger.info(downlist + " is in down list sha1");
		return downlist;
	}

	public String getCountMoreSha1() {
		String sha1str = db.easilyGetStringRs(
				"SELECT sha1 FROM downloadvtstatus where downloadstatus != ? ORDER BY sha1 DESC LIMIT 0, 1",
				new Object[] { Integer.valueOf(this.downloadstatus) });
		if ((sha1str == null) || (sha1str.length() == 0)) {
			logger.error("no last record which exception status");

			String empty = "";
			return empty;
		}
		logger.info(sha1str + " is the last record of exception status");
		return sha1str;
	}

	public String getLastSha1() {
		String sha1str = db.easilyGetStringRs("SELECT sha1 FROM downloadvtstatus ORDER BY sha1 DESC LIMIT 0, 1",
				new Object[0]);
		if ((sha1str == null) || (sha1str.length() == 0)) {
			logger.error("the last record sha1 not existed in down table");

			String empty = "";
			return empty;
		}
		logger.info(sha1str + " is the last record of downloadstatus");
		return sha1str;
	}

	public boolean insertDownloadStatus(String sha1id) {
		boolean isInsert = db.easilyExecutePreparedStmt("INSERT INTO downloadvtstatus VALUES (?, ?)",
				new Object[] { sha1id, Integer.valueOf(0) });
		if (!isInsert) {
			logger.error("insert a record into status failed");
			System.exit(-1);
		}
		logger.info(isInsert + " is result of down table");
		return isInsert;
	}

	public boolean updateDownloadedSta() {
		boolean isUpdate = db.easilyExecutePreparedStmt("UPDATE downloadvtstatus SET downloadstatus=? where sha1 = ?",
				new Object[] { Integer.valueOf(this.downloadstatus), this.sha1_id });
		if (!isUpdate) {
			logger.error("the last record sha1 inside downloadstatus");
			System.exit(-1);
		}
		logger.info(isUpdate + " is the last record of downloadstatus");
		return isUpdate;
	}

	public int insertRecord(String sha1id) {
		Connection myCon = db.getTestedCon();
		if (myCon == null) {
			boolean isnCon = true;
			int trynum = 0;
			while (isnCon) {
				myCon = db.getTestedCon();
				if ((myCon == null) && (trynum != 5)) {
					logger.info("myCon is trying to connect " + trynum + "th times!");
					isnCon = true;
					trynum++;
				} else {
					isnCon = false;
				}
			}
			logger.error("myCon is null");
			System.exit(-1);
		}
		DBResource resource = null;
		try {
			resource = DB.execute(myCon, "INSERT INTO downloadvtstatus VALUES (?, ?)",
					new Object[] { sha1id, Integer.valueOf(0) });
		} catch (SQLException e) {
			logger.error(e);
		} finally {
			DB.close(resource);
		}
		DBUtilShared.close(myCon);
		return 0;
	}
}
