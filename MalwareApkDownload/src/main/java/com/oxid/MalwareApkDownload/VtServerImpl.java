package com.oxid.MalwareApkDownload;

import com.oxid.client.Vt.VTClient;
import com.oxid.malwaresample.dao.DownStatusDao;
import com.oxid.malwaresample.dao.SampleBaseDao;
import com.oxid.util.Config;
import java.util.List;
import java.util.Properties;
import org.apache.log4j.Logger;

public class VtServerImpl {
	static Logger logger = Logger.getLogger(VtServerImpl.class.getName());
	public static String vt_host;
	public static String apikey;
	public static String Downfilepath;
	public static int malwareNameVersion;
	public static int timeout;
	public static int maxnumfiledown;
	public static int filenumgot;

	public static void init(String configFilePath) {
		Properties props = Config.readConfig(configFilePath);
		vt_host = Config.get(props, "vt_host", true);
		apikey = Config.get(props, "apikey", true);
		malwareNameVersion = Config.getInt(props, "malwareNameVersion", true);
		timeout = Config.getInt(props, "timeout", true);
		maxnumfiledown = Config.getInt(props, "maxnumfiledown", true);
		Downfilepath = Config.get(props, "Downfilepath", true);
		filenumgot = 0;
	}

	/*
	 * function: throught the status as 0 to loop download apk file
	 * @param: 
	 * */
	public static void processVTapi() {
		boolean isHasNotDownload = true;
		setSampleDb();
		while (isHasNotDownload) {
			DownStatusDao down = new DownStatusDao();
			down.setDownloadstatus(0);
			if (down.getCountMoreSha1().equals("")) {
				isHasNotDownload = false;
			} else {
				isHasNotDownload = true;

				downloadVtFile();
			}
		}
	}

	/*
	 * function: get hash value form downstatus table and download apk file using this hash
	 * @param:
	 * */
	public static void downloadVtFile() {
		DownStatusDao daodown = new DownStatusDao();
		daodown.setDownloadstatus(0);
		daodown.setSha1_id(daodown.getCountMoreSha1());
		daodown.setLimit(1000);
		List<String> downs = daodown.getDownList();
		if (downs == null) {
			logger.info("no any further data in downstatus");
			return;
		}
		for (String resource : downs) {
			logger.info("start downloading hash file -> " + resource);
			filenumgot += 1;
			int res = getResultFromVT(resource);
			daodown.setSha1_id(resource);
			if (res == 4) {
				logger.info("today upto max download num -> " + filenumgot);
				System.exit(-1);
			} else if (res == 1) {
				logger.info("this hash file cannot download -> " + resource);
				// 0: not yet download; 1: download successed; 3: download
				// failed; 2: download success and update failed; 4: download
				// and update both failed
				daodown.setDownloadstatus(3);
				if (!daodown.updateDownloadedSta()) {
					daodown.setDownloadstatus(4);
					daodown.updateDownloadedSta();
				}
			} else {
				daodown.setDownloadstatus(1);
				if (!daodown.updateDownloadedSta()) {
					daodown.setDownloadstatus(2);
					daodown.updateDownloadedSta();
				}
			}
			logger.info("downloading hash file end -> " + resource);
		}
	}

	/*
	 * function: set connection parameter for samplemanagement database
	 * @param: 
	 * */
	public static void setSampleDb() {
		SampleBaseDao.db_user = "root";
		SampleBaseDao.db_password = "passw0rd123";
		SampleBaseDao.db_url = "jdbc:mysql://samplemanagementmysql.newskysecurity.com:3306/sample_management?characterEncoding=utf8";
		SampleBaseDao.initDB();
	}

	/*
	 * function: download apk file according to hash value of input
	 * @param: resource hash value
	 * */
	public static int getResultFromVT(String resource) {
		if (filenumgot >= maxnumfiledown) {
			return 4;
		}
		int result = VTClient.downlaodVTFile(resource, vt_host, apikey, Downfilepath);
		if (result != 0) {
			logger.error("downlaod from VT failed : " + result);
			return 1;
		}
		return 0;
	}
}
